# Docker Compose Configuration for Cognitive AI Clone Platform

version: '3.8'

services:
  # Main Cognitive AI Clone Application
  cognitive-clone-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cognitive_clone_app
    ports:
      - "8501:8501"  # Streamlit app
      - "8000:8000"  # FastAPI (future)
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_PORT=8501
    volumes:
      - ./data:/app/data
      - ./src:/app/src
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - chroma-db
      - ollama
    networks:
      - cognitive-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ChromaDB Vector Database for Cognitive Memory
  chroma-db:
    image: chromadb/chroma:latest
    container_name: cognitive_chroma_db
    ports:
      - "8001:8000"  # Avoid conflict with FastAPI port
    environment:
      - CHROMA_HOST_ADDR=0.0.0.0
      - CHROMA_HOST_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma_data:/chroma/chroma
      - ./chroma_config:/chroma/config
    networks:
      - cognitive-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama for Local LLM Serving
  ollama:
    image: ollama/ollama:latest
    container_name: cognitive_ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=["*"]
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=2
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama_models:/root/.ollama/models
    networks:
      - cognitive-net
    restart: unless-stopped
    # Uncomment if you have NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Management (Optional - for production)
  redis:
    image: redis:7-alpine
    container_name: cognitive_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cognitive-net
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    profiles: ["production"]

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: cognitive_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - cognitive-clone-app
    networks:
      - cognitive-net
    restart: unless-stopped
    profiles: ["production"]

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cognitive_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cognitive-net
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cognitive_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - cognitive-net
    restart: unless-stopped
    profiles: ["monitoring"]

# Network Configuration
networks:
  cognitive-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  chroma_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/chroma
  
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ollama
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# Health Check Configuration
x-healthcheck-config: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s